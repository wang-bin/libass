cmake_minimum_required(VERSION 2.6)

PROJECT(libass)
message(STATUS "TARGET OS: ${CMAKE_SYSTEM_NAME} ${CMAKE_SYSTEM_VERSION} ${CMAKE_SYSTEM_PROCESSOR}")

INCLUDE(CheckCCompilerFlag)
INCLUDE(CheckIncludeFile)
INCLUDE(CheckTypeSize)

SET(VERSION_MAJOR 0)
SET(VERSION_MINOR 13)
SET(VERSION_MICRO 2)
set(PROJECT_VERSION ${VERSION_MAJOR}.${VERSION_MINOR}.${VERSION_MICRO})
set(SO_VERSION 5)

SET(EXTRA_LIBS "")

OPTION(CHECK_ASM "asm" ON)
OPTION(CHECK_CORETEXT "coretext" ON)
OPTION(CHECK_FONTCONFIG "fc" ON)
OPTION(CHECK_DIRECTWRITE "dwrite" ON)
OPTION(CHECK_HARFBUZZ "hb" ON)
OPTION(CHECK_ICONV "iconv" ON)
OPTION(CHECK_LIBPNG "png" "ON")
OPTION(DISABLE_RASTERIZER "" OFF)
OPTION(ENABLE_LARGE_TILES "" OFF)

IF(CHECK_ASM)
  SET(CONFIG_ASM 0)
ENDIF()
IF(CHECK_CORETEXT)
  CHECK_INCLUDE_FILE(CoreText/CoreText.h CONFIG_CORETEXT)
ENDIF()
IF(CHECK_FONTCONFIG)
  SET(CONFIG_FONTCONFIG 0)
ENDIF()
IF(CHECK_DIRECTWRITE)
  CHECK_INCLUDE_FILE(windows.h CONFIG_DIRECTWRITE)
ENDIF()
SET(CONFIG_FREETYPE 1) #required
SET(CONFIG_FRIBIDI 1) #required
IF(CHECK_HARFBUZZ)
  SET(CONFIG_HARFBUZZ 0)
ENDIF()
IF(CHECK_ICONV)
  SET(CONFIG_ICONV 0)
ENDIF()
IF(CHECK_LIBPNG)
  SET(CONFIG_LIBPNG 0)
ENDIF()
IF(DISABLE_RASTERIZER)
  SET(CONFIG_RASTERIZER 0)
ELSE()
  SET(CONFIG_RASTERIZER 1)
ENDIF()
IF(ENABLE_LARGE_TILES)
  SET(CONFIG_LARGE_TILES 1)
ELSE()
  SET(CONFIG_LARGE_TILES 0)
ENDIF()

FOREACH(VAR CONFIG_ASM CONFIG_CORETEXT CONFIG_FONTCONFIG CONFIG_DIRECTWRITE CONFIG_FREETYPE CONFIG_FRIBIDI CONFIG_HARFBUZZ CONFIG_ICONV CONFIG_LIBPNG CONFIG_RASTERIZER CONFIG_LARGE_TILES)
  IF(${VAR})
    SET(CONF "${CONF}\n#define ${VAR} ${${VAR}}")
  ENDIF()
ENDFOREACH()
# why no #ifndef CONFIG_H?
file(WRITE "${PROJECT_BINARY_DIR}/config.h" "${CONF}")

AUX_SOURCE_DIRECTORY(libass SRC_LIST)
IF(CONFIG_CORETEXT)
  SET(EXTRA_LIBS "-framework CoreText -framework CoreFoundation -framework CoreGraphics")
ELSE()
  LIST(REMOVE_ITEM SRC_LIST "libass/ass_coretext.c")
ENDIF()
IF(NOT CONFIG_FONTCONFIG)
  LIST(REMOVE_ITEM SRC_LIST "libass/ass_fontconfig.c")
ENDIF()
IF(NOT CONFIG_DIRECTWRITE)
  LIST(REMOVE_ITEM SRC_LIST "libass/ass_directwrite.c")
ENDIF()
FILE(READ libass/libass.sym DEF_CONTENT)
FILE(WRITE "${PROJECT_BINARY_DIR}/${PROJECT_NAME}.def" "EXPORTS\n${DEF_CONTENT}")
ADD_LIBRARY(ass SHARED ${SRC_LIST} ${PROJECT_BINARY_DIR}/${PROJECT_NAME}.def)
SET_TARGET_PROPERTIES(ass PROPERTIES
  VERSION ${PROJECT_VERSION}
  SOVERSION ${SO_VERSION}
  OUTPUT_NAME "ass"
  CLEAN_DIRECT_OUTPUT 1
  #LINK_SEARCH_START_STATIC 1
)

INCLUDE_DIRECTORIES(
  libass
  ${PROJECT_BINARY_DIR}
  ${CMAKE_INSTALL_PREFIX}/include
  ${CMAKE_INSTALL_PREFIX}/include/fribidi
)
CHECK_INCLUDE_FILE(dirent.h HAVE_DIRENT_H)
IF(NOT HAVE_DIRENT_H)
  INCLUDE_DIRECTORIES(compat)
ENDIF()

#find_package(fribidi)
find_library(FRIBIDI_LIB libfribidi HINTS "${CMAKE_INSTALL_PREFIX}/lib") #msvc static lib
IF(NOT FRIBIDI_LIB)
  find_library(FRIBIDI_LIB fribidi HINTS "${CMAKE_INSTALL_PREFIX}/lib")
  IF(NOT FRIBIDI_LIB)
    MESSAGE(FATAL_ERROR "fribidi is required")
  ENDIF()
ENDIF()
message(STATUS "fribidi: ${FRIBIDI_LIB}")

find_package(freetype REQUIRED)
IF(FREETYPE_FOUND)
  message(STATUS "freetype: ${FREETYPE_LIBRARIES}")
  INCLUDE_DIRECTORIES(${FREETYPE_INCLUDE_DIRS})
ELSE()
  FIND_LIBRARY(FREETYPE_LIBRARIES freetype HINTS "${CMAKE_INSTALL_PREFIX}/lib")
  INCLUDE_DIRECTORIES(${CMAKE_INSTALL_PREFIX}/include/freetype2)
ENDIF()

IF(MSVC) #or WIN32
  CHECK_C_SOURCE_COMPILES("
    #define snprintf _snprintf
    #include <stdio.h>
    int main() {return 0;}" DEF_SNPRINTF)
  IF(DEF_SNPRINTF)
    ADD_DEFINITIONS(-Dsnprintf=_snprintf) #vc link error. vs2015 redefinition error
  ENDIF()
  #ADD_DEFINITIONS(
    #-Dinline=_inline # defined in ass_compat.h
    #-D_USE_MATH_DEFINES # M_PI. defined in ass_compat.h
  #)
ELSE()
  ADD_DEFINITIONS(
    -D_USE_MATH_DEFINES # gcc4.9
  )
ENDIF()
IF(WIN32)
  IF(CMAKE_CXX_COMPILER_ID MATCHES "GNU")
    SET(CMAKE_SHARED_LINKER_FLAGS "${CMAKE_SHARED_LINKER_FLAGS} -static-libgcc -Wl,-Bstatic") # or LINK_SEARCH_START_STATIC propertyï¼Ÿ
  ENDIF()
ENDIF()
CHECK_C_COMPILER_FLAG(-std=gnu99 HAVE_STD_GNU99)
IF(HAVE_STD_GNU99)
# gcc4.9: error: 'for' loop initial declarations are only allowed in C99 or C11 mode
# clang with c99 may not support variable length array that used in coretext code. gnu99 is required
  SET(CMAKE_C_FLAGS "-std=gnu99 ${CMAKE_C_FLAGS}")
ENDIF()

LINK_DIRECTORIES("${CMAKE_INSTALL_PREFIX}/lib")
TARGET_LINK_LIBRARIES(ass "${FRIBIDI_LIB}" "${FREETYPE_LIBRARIES}" "${EXTRA_LIBS}")

file(GLOB HEADERS "libass/ass.h" "libass/ass_types.h")
INSTALL(FILES ${HEADERS} DESTINATION include/ass)
INSTALL(FILES ${PROJECT_BINARY_DIR}/${PROJECT_NAME}.def DESTINATION lib)
INSTALL(TARGETS ass EXPORT ${PROJECT_NAME}
  RUNTIME DESTINATION bin # *.dll
  LIBRARY DESTINATION lib
  ARCHIVE DESTINATION lib)

SET(prefix ${CMAKE_INSTALL_PREFIX})
SET(exec_prefix "\${prefix}")
SET(libdir "\${exec_prefix}/lib")
SET(bindir "\${exec_prefix}/bin")
SET(includedir "\${prefix}/include")
SET(PACKAGE_VERSION "${PROJECT_VERSION}")
CONFIGURE_FILE(
    "${PROJECT_SOURCE_DIR}/${PROJECT_NAME}.pc.in"
    "${PROJECT_BINARY_DIR}/${PROJECT_NAME}.pc"
    @ONLY)
